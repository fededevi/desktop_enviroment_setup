### SETUP DESKTOP ENVIROMENT
*To compile for CTRL_COM arm and CTRL_COM Qt*
*Used versions Qt 5.9.1, fslc-framebuffer_2.4.1*
*This does not cover toolchain build*
*Tested on Virtual Box - Ubuntu 20.something*

Download Qt 5.9.1 sources
```https://download.qt.io/archive/qt/5.9/5.9.1/single/qt-everywhere-opensource-src-5.9.1.tar.xz.mirrorlist```

Obtain the corred toolchain for the board (where?), the subsequent commads will assume the toolchain is installed in:
```/opt/fslc-framebuffer/2.4.1/```

The configuration/build process of Qt will need Perl and Python
```sudo apt-get install perl python```

Extract the archive and launch configure inside Qt source root:
```./configure -v -opensource -confirm-license -no-pch -no-xcb -no-opengl -opengl es2 -make libs -device imx6 -prefix /usr/local/qt5B -extprefix $HOME/iMX6B/qt5B -hostprefix /$HOME/qt5B_iMX6_toolchain/ -device-option CROSS_COMPILE=/opt/fslc-framebuffer/2.4.1/sysroots/x86_64-fslcsdk-linux/usr/bin/arm-fslc-linux-gnueabi/arm-fslc-linux-gnueabi- -sysroot /opt/fslc-framebuffer/2.4.1/sysroots/armv7at2hf-neon-fslc-linux-gnueabi -nomake examples -no-icu -nomake tests -skip qtwebengine```

**Note on directories specified in the configuration to the command:**
**Prefix** : The directory where the qt libraries should be copied in the **target** machine after build
**Extprefix** : Directory where qt libraries will be installed in the **host** machine (to be copied in the target)
**Hostprefix** : Directory where the qt tools are placed (QMake and such), those are not required on the target machine

**Note on hardware accelerated graphics:**
The following options should enable the EGLFS plugin for the OpenGL ES graphical backend ( on top of other things )
```-no-opengl -opengl es2 -device imx6```
To make sure the configuration step went fine check if these option are enabled in the output:
```
EGLFS .................................. yes
EGLFS details:
  EGLFS i.Mx6 .......................... yes
  EGLFS EGLDevice ...................... yes
LinuxFB ................................ yes
```

**Finally to compile the Qt:**
```source /opt/fslc-framebuffer/2.4.1/environment-setup-armv7at2hf-neon-fslc-linux-gnueabi```
The script above will setup the enviroment to compile for the target, Mainly it will define the **CC/CXX/CPP** variables and the flags to run the compilers correctly. 
```make```
```make install```
This will compile and install Qt to the specified directories


### SETUP QT CREATOR - TO WORK ON QT PROJECTS 
Install QtCreator:
```sudo apt-get install qtcreator```

Now Creator need to know where to find the cross compiler for C and C++ and the toolchain for the target we built by compiling Qt. Qt Creator handles this through Kits. Under options create a new kit and set this options:

**Add C++ compiler:** 
```/opt/fslc-framebuffer/2.4.1/sysroots/x86_64-fslcsdk-linux/usr/bin/arm-fslc-linux-gnueabi/arm-fslc-linux-gnueabi-g++```
**Add C compiler:** 
```/opt/fslc-framebuffer/2.4.1/sysroots/x86_64-fslcsdk-linux/usr/bin/arm-fslc-linux-gnueabi/arm-fslc-linux-gnueabi-gcc```
**Add Qt version** ( hostprefix/extprefix directories used in qt configure )
```/home/<user>/qt5_iMX6_toolchain/bin/qmake```

Qt should be automatically use the correct compiler/linker flags for the target.
The directories may change depending on the previous commands.

Additionally it is possible to provide the kits with debuggers and **devices** to handle auto-installation with ssh/sftp of compiled binaries.
Now Qt Creator should be able to compile projects for the target platform.

### SETUP OTHER IDEs for non-Qt projects
Setting up other IDEs should be easier since it is not required to use additional tooling and libraries, depending on the project you may want to setup the enviroment in different ways:

- IDEs can be configured to just call **make** on the project makefiles after loading the enviroment provided by the toolchain:
```/opt/fslc-framebuffer/2.4.1/environment-setup-armv7at2hf-neon-fslc-linux-gnueabi```
- IDEs can be configured to setup the toolchain enviroment (like above) and then use the defined CXX, CPP, etc.. variables manually to call compilers and linker with th correct flags.
- IDEs can be configured to just ignore the toolchain-provided enviroment and call the compiler directly but this usually means that additional flags for compilers/linker must be provided manually





